Generic
discrimination
:
sorting
paritioning
unshared
data
linear
time
We
introduce
notion
discrimination
generalization
sorting
partitioning
show
worst-case
linear-time
discrimination
functions
(
discriminators
)
defined
generically
,
(
co
-
)
induction
expressive
language
order
denotations
.
The
generic
definition
yields
discriminators
generalize
distributive
sorting
multiset
discrimination
.
The
generic
discriminator
coded
compactly
using
list
comprehensions
,
order
denotations
specified
using
Generalized
Algebraic
Data
Types
(
GADTs
)
.
A
GADT-free
combinator
formulation
discriminators
also
given
.
We
give
examples
uses
discriminators
,
including
new
most-significant-digit
lexicographic
sorting
algorithm
.
Discriminators
generalize
binary
comparison
functions
:
They
operate
n
arguments
time
,
expose
information
underlying
equivalence
,
respectively
ordering
relation
arguments
.
We
argue
primitive
types
equality
(
references
ML
)
ordered
types
(
machine
integer
type
)
,
expose
equality
,
respectively
standard
ordering
relation
,
discriminators
:
Having
binary
equality
test
type
requires
T
(
n2
)
time
find
occurrences
element
list
length
n
,
element
list
,
even
equality
test
takes
constant
time
.
A
discriminator
accomplishes
linear
time
.
Likewise
,
(
constant-time
)
comparison
function
requires
T
(
n
log
n
)
time
sort
list
n
elements
.
A
discriminator
linear
time
.
